
function queryServer1() {
    const delay = Math.floor(Math.random() * 1000) + 500;
    return new Promise(resolve => {
        setTimeout(() => {
            console.log(`üü¢ –°–µ—Ä–≤–µ—Ä 1 –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ ${delay}–º—Å`);
            resolve("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ 1");
        }, delay);
    });
}

function queryServer2() {
    const delay = Math.floor(Math.random() * 1000) + 500; 
    return new Promise(resolve => {
        setTimeout(() => {
            console.log(`üü¢ –°–µ—Ä–≤–µ—Ä 2 –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ ${delay}–º—Å`);
            resolve("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ 2");
        }, delay);
    });
}

function queryServer3() {
    const delay = Math.floor(Math.random() * 1000) + 500; 
    return new Promise(resolve => {
        setTimeout(() => {
            console.log(`üü¢ –°–µ—Ä–≤–µ—Ä 3 –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ ${delay}–º—Å`);
            resolve("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ 3");
        }, delay);
    });
}

console.log("üîç –ò—â–µ–º —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–µ—Ä–≤–µ—Ä...");

Promise.race([
    queryServer1(),
    queryServer2(),
    queryServer3()
]).then(firstAnswer => {
    console.log(`üèÜ ${firstAnswer} - —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π!`);
    console.log("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!");
}).catch(error => {
    console.error('–û—à–∏–±–∫–∞', error)
})
