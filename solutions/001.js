function fetchUserInfo () {
  return new Promise( resolve => {
    setTimeout ( () => {
      console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É');
      resolve({ name: '–ê–ª–µ–∫—Å –ê–ª–≥–æ—Ä–∏—Ç–º–æ–≤', bio: '–°—Ç—Ä–æ—é –±—É–¥—É—â–µ–µ, –ø–æ –æ–¥–Ω–æ–º—É —Ü–∏–∫–ª—É –∑–∞ —Ä–∞–∑.' });
    }, 1000);
  });
}


function fetchUserTweet () {
  return new Promise( resolve => {
    setTimeout ( () => {
      console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã');
      resolve([
        '–ö–æ–º–º–∏—á—É –≤ –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º. –ß—Ç–æ –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ –Ω–µ —Ç–∞–∫?',
        '–ë–∞–≥ –∏–ª–∏ —Ñ–∏—á–∞? ü§î #–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞ - —ç—Ç–æ –∫–∞–∫ –∞—Ä—Ö–µ–æ–ª–æ–≥–∏—è.']);
    }, 1500);
  });
}


function fetchUserFollowers () {
  return new Promise ( resolve => {
    setTimeout ( () => {
      console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥—ã');
      resolve(15000);
    }, 500);
  });
}

async function loadUserProfile () {
  try {
    const [ userInfo, tweets, followers ] = await Promise.all([
      fetchUserInfo(),
      fetchUserTweet(),
      fetchUserFollowers()
    ]);

    console.log(`–ò–º—è: ${userInfo.name}`); console.log(`–ë–∏–æ: ${userInfo.bio}`);
    console.log(`–¢–≤–∏—Ç—ã: ${tweets.join(', ')}`);
    console.log(`–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${followers}`);
  }
  catch (error) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–∂–µ—Ç–∞: ", error);
      }
}

console.log('Start loading...');
loadUserProfile();
console.log('End loading...');
