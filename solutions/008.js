const readline = require('readline') //–∑–∞—Ö–æ—Ç–µ–ª –ø—Ä–æ–º–ø—Ç

const log = console.log // —è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É —Å–µ–±—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏, –∫—Ç–æ –ø–∏—à–µ—Ç –Ω–∞ js, –ø–æ—ç—Ç–æ–º—É –Ω–µ —É –∫–æ–≥–æ –¥–∞–∂–µ —Å–ø—Ä–æ—Å–∏—Ç—å
//–ê —ç—Ç–æ –≤–æ–æ–±—â–µ –Ω–æ—Ä–º log –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤—ã–Ω–æ—Å–∏—Ç—å?
//—Å error —Ç–æ–∂–µ —Ç–∞–∫ –¥–µ–ª–∞—é. –ü—Ä–∞–≤–¥–∞ –≤ production —É–∂–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π logger –∏—Å–ø–æ–ª—å–∑—É—é, –∫–æ—Ç–æ—Ä–∞—è –ø–∏—à–µ—Ç –≤ —Ñ–∞–π–ª
const sec = 1000
//–∫—Å—Ç–∞—Ç–∏, –∫–∞–∫—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å telegram —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ?
//–Ø –≤–æ—Ç –Ω–∞ Grammy –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –∫–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –ø–∏—Å–∞–ª, 
// –Ω–æ –µ—Å—Ç—å –æ—â—É—â–µ–Ω–∏—è, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–∞ Python –ø–æ–¥—Ö–æ–¥—è—Ç –±–æ–ª—å—à–µ

//0 –≠–º–∏—Ç–∞—Ü–∏—è promt –≤ node.js (–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞)
const prompt = (question) => {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    })
    
    return new Promise((resolve) => {
        rl.question(question, (answer) => {
            rl.close()
            resolve(answer)
        })
    })
}

//1 –¢—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –≤–æ–∑—Ä–≤–∞—â–∞—é—â–∏–µ Promise
const fetchMessages = (newMesseges) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(`–°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${newMesseges}`)
            reject('–£–ø—Å, —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å')
        }, sec)
    })
}

const fetchStatuses = (newStatuses) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(`–°—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${newStatuses}`)
            reject('–£–ø—Å, —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫')
        }, 0.5 * sec)
    })
}

const fetchStickers = (newStickers) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(`–°—Ç–∏–∫–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${newStickers}`)
            reject('üòµ‚Äçüí´')
        }, 1.5 * sec)
    })
}
//2 Promise.all
const loadChat = async (message, status, sticker) => {
    //–¥–µ–ª–∞–µ–º —Å–æ–≤—Å–µ–º –ø–æ –∫—Ä–∞—Å–æ—Ç–µ
    try {
        //4.1 "–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞",
    log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞')
    const promises = [fetchMessages(message), fetchStatuses(status), fetchStickers(sticker)]
    const results = await Promise.all(promises)
    //4.2 "–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    //3 –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Promise.all
    log(results) 
    }
    catch (error) {
        log('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error)
    } 
}

//Extra –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
const main = async () => {
    try {
        const message = await prompt('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ')
        const status = await prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å: ')
        const sticker = await prompt('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∏–∫–µ—Ä: ')
        
        await loadChat(message, status, sticker)
    } catch (error) {
        log('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error)
    }
}
// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
main()