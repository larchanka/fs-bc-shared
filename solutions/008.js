// Что нужно сделать:

// Создай три функции, каждая из которых возвращает Promise:

// ◦ fetchMessages(): Симулирует загрузку сообщений. Через 1 секунду разрешается со строкой "Сообщения загружены". ◦ fetchStatuses(): Симулирует загрузку статусов. Через 500 мс разрешается со строкой "Статусы загружены". ◦ fetchStickers(): Симулирует загрузку стикеров. Через 1.5 секунды разрешается со строкой "Стикеры загружены". ◦ Используй setTimeout внутри промисов для имитации задержки сети.

// Используй Promise.all(), чтобы запустить все три функции одновременно и дождаться их завершения.

// Когда все промисы успешно завершатся, выведи в консоль массив с результатами (строками "Сообщения загружены", "Статусы загружены", "Стикеры загружены") и сообщение "Чат готов к отображению!".

// Добавь console.log("Начало загрузки данных чата") перед запуском Promise.all() и console.log("Запрос на загрузку отправлен") сразу после. Проанализируй порядок вывода.


function createPromise(delay, message) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {resolve(message)}, delay)
  });
}

function fetchMessages() {
  return createPromise(1000, "Сообщения загружены.");
}

function fetchStatuses() {
  return createPromise(500, "Статусы загружены.");
}

function fetchStickers() {
  return createPromise(1500, "Стикеры загружены!");
}

async function loadChat() {
    console.log("Начало загрузки чата...");
  try {
    console.log("Запрос на загрузку отправлен.");
    const results = await Promise.all([fetchMessages(), fetchStatuses(), fetchStickers()]);
  
    console.log(results);
  } catch (error) {
    console.log(`При попытке загрузки произошла ошибка: ${error}`);
  }
}


// 1. Сначала выведется "Начало загрузки чата"
// 2. "Запрос на загрузку отправлен"
// 3. Наши промисы через 1,5 секунды (максимальная задержка, а Promise.all ждет выполнение всех промисов и только потом предоставляет результат)


